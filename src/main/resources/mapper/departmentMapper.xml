<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.idevlab.LabMgr.Dao.DepartmentDao">

    <select id="countDepartment" resultType="Integer">
        SELECT count(0)
        FROM department d
        WHERE d.status !=-1
    </select>

    <select id="countDepartmentUser" resultType="Integer">
                 SELECT
                     count(0)
                 FROM user_department ud
                 WHERE ud.status != -1 
        <if test="user != null">And ud.user = #{user}</if>
        <if test="department != null">And ud.department = #{department}</if>
    </select>

    <resultMap id="departmentMap" type="com.alibaba.fastjson.JSONObject">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="description" property="description"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="status" property="status"/>
    </resultMap>
    <select id="listDepartment" resultMap="departmentMap">
                 SELECT
                     id                                      id,
                     name                                    name,
                     description                             description,
                     DATE_FORMAT(create_time, '%Y/%m/%d %T') createTime,
                     DATE_FORMAT(update_time, '%Y/%m/%d %T') updateTime,
                     status                                  status
                 FROM department
                 WHERE status != -1
                 <if test="id != null">And id = #{id}</if>
                 <if test="name != null">And name like #{name}</if>
                 ORDER BY id
                 LIMIT #{offSet}, #{pageRow}
    </select>


    <resultMap id="departmentUserMap" type="com.alibaba.fastjson.JSONObject">
        <id column="id" property="id"/>
        <result column="user" property="user"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="department" property="department"/>
        <result column="departmentName" property="departmentName"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="status" property="status"/>
    </resultMap>


    <select id="listDepartmentUser" resultMap="departmentUserMap">
                 SELECT
                     ud.id                                      id,
                     ud.user                                    user,
                     ud.department                              department,
                     DATE_FORMAT(ud.create_time, '%Y/%m/%d %T') createTime,
                     DATE_FORMAT(ud.update_time, '%Y/%m/%d %T') updateTime,
                     u.nickname                                 nickname,
                     dp.name                                    departmentName,
                     u.username                                 username,
                     ud.status                                  status
                 FROM user_department ud
                      LEFT JOIN sys_user u ON ud.user = u.id
                      LEFT JOIN department dp ON ud.department = dp.id
                 WHERE ud.status != -1 
                 And u.status != -1 And dp.status != -1
        <if test="department != null">And ud.department = #{department}</if>
                 ORDER BY ud.id
                 LIMIT #{offSet}, #{pageRow}
    </select>

    <insert id="addDepartment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO department
        (name, description,status) VALUES
            ( #{name}, #{description},#{status})
    </insert>

    <insert id="addUserToDepartment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user_department
        (user, department,status) VALUES
            ( #{user}, #{department},#{status})
    </insert>

    <update id="deleteDepartmentUser">
        UPDATE user_department
        SET status=-1
        <where>
        <if test="user!= null">user = #{user}</if>
        <if test="id!= null">And id = #{id}</if>
        <if test="department != null">And department= #{department}</if>
        </where>
    </update>

    <update id="updateDepartment">
        UPDATE department
        <set>
            <if test="name != null">name=#{name},</if>
            <if test="description != null">description=#{description},</if>
            <if test="status != null">status=#{status}</if>
        </set>
        WHERE id = #{id}
    </update>

    <update id="deleteDepartment">
        UPDATE department
        SET status=-1
        WHERE id = #{id}
    </update>
</mapper>